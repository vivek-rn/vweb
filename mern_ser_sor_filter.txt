#####MERN Search,Sort,Filter combined operation:
###Backend
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const app = express();
const port = 5000;

app.use(cors());
app.use(bodyParser.json());

// Sample data (replace with your data source)
const items = [];
for (let i = 1; i <= 100; i++) {
  items.push({ id: i, name: `Item ${i}`, category: i % 2 === 0 ? 'Even' : 'Odd' });
}

// Advanced operation: Search, filter, sort, and paginate
app.get('/advanced', (req, res) => {
  const { search, filter, sort, page, pageSize } = req.query;

  // Apply search
  let filteredItems = items;
  if (search) {
    const searchQuery = search.toLowerCase();
    filteredItems = items.filter(item =>
      item.name.toLowerCase().includes(searchQuery)
    );
  }

  // Apply filtering
  if (filter) {
    filteredItems = filteredItems.filter(item =>
      item.category === filter
    );
  }

  // Apply sorting
  if (sort) {
    const sortOrder = sort === 'asc' ? 1 : -1;
    filteredItems.sort((a, b) =>
      a.name.localeCompare(b.name) * sortOrder
    );
  }

  // Apply pagination
  const totalItems = filteredItems.length;
  const currentPage = parseInt(page) || 1;
  const pageSizeValue = parseInt(pageSize) || 10;
  const startIndex = (currentPage - 1) * pageSizeValue;
  const endIndex = startIndex + pageSizeValue;
  const pageItems = filteredItems.slice(startIndex, endIndex);

  res.json({
    data: pageItems,
    totalItems,
    currentPage,
    pageSize: pageSizeValue,
  });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

###clinet
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [search, setSearch] = useState('');
  const [filter, setFilter] = useState('');
  const [sort, setSort] = useState('');
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [items, setItems] = useState([]);
  const [totalItems, setTotalItems] = useState(0);

  useEffect(() => {
    fetchItems();
  }, [search, filter, sort, page, pageSize]);

  const fetchItems = () => {
    axios.get(`/advanced?search=${search}&filter=${filter}&sort=${sort}&page=${page}&pageSize=${pageSize}`)
      .then(response => {
        setItems(response.data.data);
        setTotalItems(response.data.totalItems);
      })
      .catch(error => console.error('Error fetching data:', error));
  };

  return (
    <div className="App">
      <h1>Advanced Operations Example</h1>

      {/* Search input */}
      <input
        type="text"
        placeholder="Search"
        value={search}
        onChange={e => setSearch(e.target.value)}
      />

      {/* Filter dropdown */}
      <select
        value={filter}
        onChange={e => setFilter(e.target.value)}
      >
        <option value="">Filter by Category</option>
        <option value="Even">Even</option>
        <option value="Odd">Odd</option>
      </select>

      {/* Sort dropdown */}
      <select
        value={sort}
        onChange={e => setSort(e.target.value)}
      >
        <option value="">Sort</option>
        <option value="asc">Ascending</option>
        <option value="desc">Descending</option>
      </select>

      {/* Pagination */}
      <input
        type="number"
        placeholder="Page"
        value={page}
        onChange={e => setPage(e.target.value)}
      />
      <input
        type="number"
        placeholder="Page Size"
        value={pageSize}
        onChange={e => setPageSize(e.target.value)}
      />

      {/* Display items */}
      <ul>
        {items.map(item => (
          <li key={item.id}>
            {item.name} - {item.category}
          </li>
        ))}
      </ul>

      {/* Pagination info */}
      <p>Total Items: {totalItems}</p>
    </div>
  );
}

export default App;
import React from 'react';
import './App.css';
import ProductList from './ProductList';

function App() {
  return (
    <div className="App">
      <h1>React Frontend</h1>
      <ProductList />
    </div>
  );
}

export default App;

----------------------------------------------------------------------
----server
const express = require('express');
const cors = require('cors');
const app = express();
const port = 3001; // You can choose any port you prefer

app.use(cors());
app.use(express.json());

// Sample data (you can replace this with your own data source)
const products = [
  { id: 1, name: 'Product A', category: 'Category 1', price: 10 },
  { id: 2, name: 'Product B', category: 'Category 2', price: 20 },
  { id: 3, name: 'Product C', category: 'Category 1', price: 15 },
  { id: 4, name: 'Product D', category: 'Category 3', price: 25 },
  // Add more products here
];

// Sort, filter, search, and get by ID
app.get('/api/products', (req, res) => {
  const { sortBy, sortOrder, category, priceMin, priceMax, search, ids } = req.query;

  let filteredProducts = [...products];

  // Apply filtering
  if (category) {
    filteredProducts = filteredProducts.filter(
      (product) => product.category === category
    );
  }

  if (priceMin) {
    filteredProducts = filteredProducts.filter(
      (product) => product.price >= parseInt(priceMin)
    );
  }

  if (priceMax) {
    filteredProducts = filteredProducts.filter(
      (product) => product.price <= parseInt(priceMax)
    );
  }

  // Apply search with regex on multiple columns
  if (search) {
    const regex = new RegExp(search, 'i');
    filteredProducts = filteredProducts.filter((product) =>
      regex.test(product.name) || regex.test(product.category)
    );
  }

  // Get products by specific IDs greater than a certain value
  if (ids) {
    const idList = ids.split(',').map(Number);
    filteredProducts = filteredProducts.filter(
      (product) => idList.includes(product.id) && product.id > 2 // Example: Get products with IDs greater than 2
    );
  }

  // Apply sorting
  if (sortBy && sortOrder) {
    if (sortOrder === 'asc') {
      filteredProducts.sort((a, b) => (a[sortBy] > b[sortBy] ? 1 : -1));
    } else if (sortOrder === 'desc') {
      filteredProducts.sort((a, b) => (a[sortBy] < b[sortBy] ? 1 : -1));
    }
  }

  res.json(filteredProducts);
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


-----client
--ser.js
import React, { useState } from 'react';

function SearchBar({ onSearch }) {
  const [searchText, setSearchText] = useState('');

  const handleSearch = () => {
    onSearch(searchText);
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Search"
        value={searchText}
        onChange={(e) => setSearchText(e.target.value)}
      />
      <button onClick={handleSearch}>Search</button>
    </div>
  );
}

export default SearchBar;

---sort.js
import React from 'react';

function SortSelect({ options, onChange }) {
  return (
    <div>
      <label>Sort By:</label>
      <select onChange={onChange}>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
    </div>
  );
}

export default SortSelect;


--filter.js
import React, { useState } from 'react';

function FilterOptions({ onFilter }) {
  const [category, setCategory] = useState('');
  const [priceMin, setPriceMin] = useState('');
  const [priceMax, setPriceMax] = useState('');

  const handleFilter = () => {
    onFilter({ category, priceMin, priceMax });
  };

  return (
    <div>
      <input
        type="text"
        placeholder="Category"
        value={category}
        onChange={(e) => setCategory(e.target.value)}
      />
      <input
        type="number"
        placeholder="Min Price"
        value={priceMin}
        onChange={(e) => setPriceMin(e.target.value)}
      />
      <input
        type="number"
        placeholder="Max Price"
        value={priceMax}
        onChange={(e) => setPriceMax(e.target.value)}
      />
      <button onClick={handleFilter}>Filter</button>
    </div>
  );
}

export default FilterOptions;

---prodList.js (main file)
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './SearchBar';
import SortSelect from './SortSelect';
import FilterOptions from './FilterOptions';

function ProductList() {
  const [products, setProducts] = useState([]);
  const [sortBy, setSortBy] = useState('');
  const [searchText, setSearchText] = useState('');
  const [filterOptions, setFilterOptions] = useState({});

  useEffect(() => {
    fetchProducts();
  }, [sortBy, searchText, filterOptions]);

  const fetchProducts = async () => {
    try {
      const response = await axios.get(
        `/api/products?sortBy=${sortBy}&search=${searchText}&category=${filterOptions.category}&priceMin=${filterOptions.priceMin}&priceMax=${filterOptions.priceMax}`
      );
      setProducts(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Product List</h2>
      <SearchBar onSearch={setSearchText} />
      <SortSelect
        options={[
          { label: 'Name (A-Z)', value: 'name' },
          { label: 'Name (Z-A)', value: 'name' },
          { label: 'Price (Low to High)', value: 'price' },
          { label: 'Price (High to Low)', value: 'price' },
        ]}
        onChange={(e) => setSortBy(e.target.value)}
      />
      <FilterOptions onFilter={setFilterOptions} />
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - {product.category} - ${product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ProductList;

---app.js (includes prodList.js)
import React from 'react';
import './App.css';
import ProductList from './ProductList';

function App() {
  return (
    <div className="App">
      <h1>React Frontend</h1>
      <ProductList />
    </div>
  );
}

export default App;
