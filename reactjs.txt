const e = require("express");
const express = require("express");
const SellBuy = require("../mongoose/models/sellBuy")

// setting up the router

const sellAndBuyRouter = new express.Router();

// code goes here for routes

sellAndBuyRouter.get('/sellProduct', async function (req, res) {
var reqProduct = req.query.product
var sortProduct = req.query.sortBy
try {
if (reqProduct !== undefined) {
var sliced = reqProduct.split('"').join('')
res.status(200).json(await SellBuy.find({ productName: sliced }))
}
else {
if (sortProduct !== undefined) {
var sliced = sortProduct.split('"').join('')
if (sliced === "lowerCostPrice") {
res.status(200).json(await SellBuy.find().sort({ "costPrice": 1 }))
}
if (sliced === "higherCostPrice") {
res.status(200).json(await SellBuy.find().sort({ "costPrice": -1 }))
}
if (sliced === "lowerSoldPrice") {
res.status(200).json(await SellBuy.find().sort({ "soldPrice": 1 }))
}
if (sliced === "higherSoldPrice") {
res.status(200).json(await SellBuy.find().sort({ "soldPrice": -1 }))
}
}
else
res.status(200).json(await SellBuy.find())
}
} catch (error) {
res.status(400).json({ message: error.message })
}
})

sellAndBuyRouter.post('/sellProduct', async (req, res) => {
try {
var userData = {
productName: req.body.productName,
costPrice: req.body.costPrice,
}
var product = new SellBuy(userData)
if (req.body.productName.length >= 4 && req.body.costPrice > 0) {//
product.save().then(course => {
res.status(201).json({ "message": "Product Added" })
});
}
else if (req.body.productName.length < 4) {
res.status(400).json({ "error": "product name should have minimum of four characters" })
}
else if (req.body.costPrice <= 0) {
res.status(400).json({ "error": "cost price value cannot be zero or negative value" })
}
} catch (error) {

}
});


sellAndBuyRouter.patch('/sellProduct/:id', async (req, res) => {
try {
if (req.body.soldPrice > 0) {
res.status(200).json({ "message": "Updated Successfully" });
await SellBuy.findByIdAndUpdate(req.params.id, { $set: { soldPrice: req.body.soldPrice } }, { new: true })
}
else {
res.status(400).json({ "error": "sold price value cannot be zero or negative value" })
}
} catch (error) {
res.status(400);
}
})


sellAndBuyRouter.delete('/sellProduct/:id', async(req, res) => {
try {
console.log(req.url)
await SellBuy.remove({_id:req.params.id}).then(res.status(200).json({ "message": "Deleted successfully" }))
}catch(error){
res.status(400)
}
});
// exporting the router

module.exports = sellAndBuyRouter;
