#####MERN Sort operation:
###Backend
const express = require('express');
const cors = require('cors');
const app = express();
const port = 5000;

app.use(cors());

// Sample data (replace with your data source)
const items = [
  { id: 1, name: 'Item 1', category: 'Category A' },
  { id: 2, name: 'Item 2', category: 'Category B' },
  // Add more items here
];

// Sort operation
app.get('/sort', (req, res) => {
  const sortBy = req.query.sortBy;
  if (!sortBy) {
    res.status(400).json({ error: 'sortBy parameter is required' });
    return;
  }

  const sortedItems = [...items];
  sortedItems.sort((a, b) => a[sortBy].localeCompare(b[sortBy]));

  res.json(sortedItems);
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


###Frontend
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [sortedItems, setSortedItems] = useState([]);
  const [sortBy, setSortBy] = useState('');

  const handleSort = () => {
    if (!sortBy) {
      alert('Please select a sorting option.');
      return;
    }

    axios.get(`/sort?sortBy=${sortBy}`)
      .then(response => setSortedItems(response.data))
      .catch(error => console.error('Error sorting:', error));
  };

  return (
    <div className="App">
      <h1>Sort Operation Example</h1>
      <select onChange={e => setSortBy(e.target.value)}>
        <option value="">Select Sorting</option>
        <option value="name">Sort by Name</option>
        <option value="category">Sort by Category</option>
      </select>
      <button onClick={handleSort}>Sort</button>
      <ul>
        {sortedItems.map(item => (
          <li key={item.id}>
            {item.name} - {item.category}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
------------------------------------------------------------------------------------------------------------
-------server:
const express = require('express');
const cors = require('cors');
const app = express();
const port = 3001; // You can choose any port you prefer

app.use(cors());
app.use(express.json());

// Sample data (you can replace this with your own data source)
const products = [
  { id: 1, name: 'Product A', category: 'Category 1', price: 10 },
  { id: 2, name: 'Product B', category: 'Category 2', price: 20 },
  { id: 3, name: 'Product C', category: 'Category 1', price: 15 },
  // Add more products here
];

// Sort products with multiple sort parameters
app.get('/api/products', (req, res) => {
  const { sortBy, sortOrder } = req.query;

  let sortedProducts = [...products];

  if (sortBy && sortOrder) {
    if (sortOrder === 'asc') {
      sortedProducts.sort((a, b) => (a[sortBy] > b[sortBy] ? 1 : -1));
    } else if (sortOrder === 'desc') {
      sortedProducts.sort((a, b) => (a[sortBy] < b[sortBy] ? 1 : -1));
    }
  }

  res.json(sortedProducts);
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


---------client:
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function ProductList() {
  const [products, setProducts] = useState([]);
  const [sortBy, setSortBy] = useState('');
  const [sortOrder, setSortOrder] = useState('');

  useEffect(() => {
    fetchProducts();
  }, [sortBy, sortOrder]);

  const fetchProducts = async () => {
    try {
      const response = await axios.get(
        `/api/products?sortBy=${sortBy}&sortOrder=${sortOrder}`
      );
      setProducts(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Product List</h2>
      <div>
        <label>Sort By:</label>
        <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>
          <option value="">-- Select --</option>
          <option value="name">Name</option>
          <option value="category">Category</option>
          <option value="price">Price</option>
        </select>
        <label>Sort Order:</label>
        <select
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value)}
        >
          <option value="">-- Select --</option>
          <option value="asc">Ascending</option>
          <option value="desc">Descending</option>
        </select>
      </div>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - {product.category} - ${product.price}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ProductList;
